
on: [push, pull_request]

permissions:
  id-token: write # This is required for requesting the JWT

env:
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  AWS_TASK_DEFINITION_ARN: ${{ secrets.AWS_TASK_DEFINITION_ARN }}
  AWS_SERVICE: ${{ secrets.AWS_SERVICE }}
  AWS_CLUSTER: ${{ secrets.AWS_CLUSTER }}

jobs:
  publish:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
        # aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        # aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-gov-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        $uri = "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
        docker build -t $uri .
        docker push $uri
        # append the image output for GH Actions, using powershell
        "image=$uri" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition-arn: ${{ env.AWS_TASK_DEFINITION_ARN }}
        container-name: my-container
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.AWS_SERVICE }}
        cluster: ${{ env.AWS_CLUSTER }}
        wait-for-service-stability: true