name: Deploy Image

on:
  # [push, pull_request]
  workflow_call:
    secrets:
      AWS_ROLE_TO_ASSUME:
        description: IAM role ARN to assume
        required: true
      ecr_repository:
        description: Name of the ECR repository
        required: true
      task_definition_arn:
        description: Task definition ARN to update
        required: true
      container:
        description: Name of the container to update
        required: true
      service:
        description: AWS Service
        required: true
      cluster:
        description: AWS Cluster
        required: true


# permissions:
#   id-token: write # This is required for requesting the JWT

env:
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  ECR_REPOSITORY: ${{ secrets.ecr_repository }}
  AWS_TASK_DEFINITION_ARN: ${{ secrets.task_definition_arn }}
  AWS_CONTAINER: ${{ secrets.container }}
  AWS_SERVICE: ${{ secrets.service }}
  AWS_CLUSTER: ${{ secrets.cluster }}

  # ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  # AWS_TASK_DEFINITION_ARN: ${{ secrets.AWS_TASK_DEFINITION_ARN }}
  # AWS_CONTAINER: ${{ secrets.AWS_CONTAINER }}
  # AWS_SERVICE: ${{ secrets.AWS_SERVICE }}
  # AWS_CLUSTER: ${{ secrets.AWS_CLUSTER }}

jobs:
  publish:
    runs-on: windows-latest
    steps:
    # - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
        # aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        # aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-gov-west-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # - name: Build, tag, and push image to Amazon ECR
    #   id: build-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     $uri = "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"
    #     docker build -t $uri .
    #     docker push $uri
    #     # append the image output for GH Actions, using powershell
    #     "image=$uri" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Fetch latest image for the repository
      id: fetch-latest
      run: |
        $image_tag = aws ecr describe-images --repository-name ${{ env.ECR_REPOSITORY }} --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text
        $uri = "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:$image_tag"
        "image=$uri" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition-arn: ${{ env.AWS_TASK_DEFINITION_ARN }}
        container-name: ${{ env.AWS_CONTAINER }}
        image: ${{ steps.fetch-latest.outputs.image }}
        # image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.AWS_SERVICE }}
        cluster: ${{ env.AWS_CLUSTER }}
        wait-for-service-stability: true  # Wait for successful deploy to finish before stopping